/**
  * Protocol between cores (peers).
  * Version : 1
  * All string are encoded in UTF-8.
  */

import "common.proto";

package Protos.Core;

/***** Multicast UDP messages. *****/
// Im alive.
// This message is sent periodically to all other peers (for example each 10s).
// It contains an array of hash chunks to know which peer has which chunk.
// If a peer owns one or more chunk corresponding to the given hashes then it
// will reply with a 'ChunksOwned' message.
// These hashes can come from different files.
// Remember that the peer ID of the sender is in the message header.
// a -> all
// id : 0x01
message IMAlive {
   required uint32 version = 1; // The version of the protocol used. If 'version' from another peer doesn't correspond to our own version, this peer is ignored.
   optional string core_version = 9; // The core version, for example: "Version: 1.1.4 (Linux)".
   
   required uint32 port = 2; // The port listened by the core.
   required string nick = 3;
   
   required uint64 amount = 4; // [byte] Amount of sharing.
   optional uint32 download_rate = 7;
   optional uint32 upload_rate = 8;
   
   optional uint64 tag = 5; // A random number, all results must repeat this number.
   repeated Common.Hash chunk = 6; // Can be empty.
}
// This message is only sent if at least one requested chunks is known.
// Return an array with a bool value for each
// given chunks. 'true' means "I have this chunk".
// all -> a
// id : 0x02
message ChunksOwned {
   required uint64 tag = 1; // The repeated number.
   repeated bool chunk_state = 2 [packed=true]; // The array size must have the same size of HaveChunks.chunks.
}

// a -> all
// id : 0x11
message ChatMessage {
   required string message = 1;
}

// Searching a file or a directory.
// See http://dev.euphorik.ch/wiki/pmp/Algorithms#Searching for more details.
// a -> all
// id : 0x21
message Find {
   required uint64 tag = 1; // A tag to identify the search. All answers must have the same tag.
   required string pattern = 2;
}
// Results.
// The size of this message must fit in a UDP packet so it must not exeed a certain amount of bytes, depending of the network. See Protos.Core.Settings.max_udp_datagram_size.
// The size can typically set to 8164 B.
// Many of message can be sent by a peer for a given search. The core will only accept answers
// for a limited duration. For example 3 seconds.
// all -> a
// id : 0x22
// Common.FindResult (see common.proto)


/***** Unicast TCP Messages. *****/
// Browsing.
// a -> b
// id : 0x31
message GetEntries {
   optional Common.Entries dirs = 1; // The shared directories must have the field 'shared_dir' defined but 'shared_dir.shared_name' is not mandatory.
   optional bool get_roots = 2 [default = false]; // If true the roots directories will be appended to the entries result. If the Dir field above is empty then the roots folders will always be sent whatever get_roots is true or false.
}
// b -> a
// id : 0x32
message GetEntriesResult {
   repeated Common.Entries entries = 1; // If an entry is empty or doesn't exist, it will be empty.
}

// Get hashes.
// If a peer want to start a queued download but doesn't know its hashes
// it will ask the hashes to the source peer.
// If 'b' doesn't have the hashes but has the file
// the hashes will be computed on the fly. Thus this request
// can be a bit long (~20s).
// a -> b
// id : 0x41
message GetHashes {
   required Common.Entry file = 1; // Must have the field shared_dir set. If it contains some chunk hashes only the next ones will be sent.
}
// b -> a
// id : 0x42
message GetHashesResult {
   enum Status {
      OK = 0;
      DONT_HAVE = 1; // 'b' doesn't have the requested entry.
      ERROR_UNKNOWN = 255;
   }
   required Status status = 1; // If status != OK nb_hash is not set.
   optional uint32 nb_hash = 2; // The number of hashe that will be sent. Only the unknown hashes are sent, not the total. Depend of GetHashes.file.chunk.
}
// For each hash, this message is sent. Only if GetHashesResult.status == OK.
// b -> a
// id = 0x43
// Common.Hash

// Download.
// a -> b
// id : 0x51
message GetChunk {
   required Common.Hash chunk = 1;
   required uint32 offset = 2; // [byte] Relative to the beginning of the chunk.
}
// b -> a
// id : 0x52
message GetChunkResult {
   enum Status {
      OK = 0;
      DONT_HAVE = 1; // 'b' doesn't have this chunk.
      ALREADY_DOWNLOADING = 2; // If 'a' is already downloading a chunk from 'b'.
      TOO_MANY_CONNECTIONS = 3;
      DONT_HAVE_DATA_FROM_OFFSET = 4; // If we have the chunk but we don't have the data from the given offset.
      ERROR_UNKNOWN = 255;
   }
   required Status status = 1;
   optional uint32 chunk_size = 2; // This value must be between 1 and Proto.Core.Settings.chunk_size.
}
// b -> a : stream of data..
